import { MBaseMaterial } from "./MBaseMaterial";
import ShaderDefines = Laya.ShaderDefines;
import Vector4 = Laya.Vector4;
export declare class UnlitMaterial extends MBaseMaterial {
    static shaderName: string;
    static defaultMaterial: UnlitMaterial;
    static install(): Promise<void>;
    private static initShader;
    static shaderDefines: ShaderDefines;
    static SHADERDEFINE_ALBEDOTEXTURE: number;
    static SHADERDEFINE_TILINGOFFSET: number;
    static SHADERDEFINE_ENABLEVERTEXCOLOR: number;
    static __initDefine__(): void;
    static RENDERMODE_OPAQUE: number;
    static RENDERMODE_CUTOUT: number;
    static RENDERMODE_TRANSPARENT: number;
    static RENDERMODE_ADDTIVE: number;
    static ALBEDOTEXTURE: number;
    static ALBEDOCOLOR: number;
    static TILINGOFFSET: number;
    static CULL: number;
    static BLEND: number;
    static BLEND_SRC: number;
    static BLEND_DST: number;
    static DEPTH_TEST: number;
    static DEPTH_WRITE: number;
    private _albedoColor;
    private _albedoIntensity;
    private _enableVertexColor;
    constructor();
    _ColorR: number;
    _ColorG: number;
    _ColorB: number;
    _ColorA: number;
    _AlbedoIntensity: number;
    _MainTex_STX: number;
    _MainTex_STY: number;
    _MainTex_STZ: number;
    _MainTex_STW: number;
    _Cutoff: number;
    albedoColorR: number;
    albedoColorG: number;
    albedoColorB: number;
    albedoColorA: number;
    albedoColor: Vector4;
    albedoIntensity: number;
    albedoTexture: laya.resource.BaseTexture;
    tilingOffsetX: number;
    tilingOffsetY: number;
    tilingOffsetZ: number;
    tilingOffsetW: number;
    tilingOffset: laya.d3.math.Vector4;
    enableVertexColor: boolean;
    renderMode: any;
    depthWrite: any;
    cull: any;
    blend: any;
    blendSrc: any;
    blendDst: any;
    depthTest: any;
    clone(): UnlitMaterial;
}
